{"version":3,"sources":["meteor://ðŸ’»app/packages/jalik:ufs-gridfs/ufs-gridfs.js"],"names":["module","export","GridFSStore","UploadFS","link","v","Meteor","Store","constructor","options","Object","assign","chunkSize","collectionName","TypeError","parseInt","isServer","mongo","Package","MongoInternals","NpmModule","db","defaultRemoteCollectionDriver","mongoStore","GridFSBucket","bucketName","chunkSizeBytes","delete","fileId","callback","err","console","log","collection","findOne","then","file","getReadStream","openDownloadStream","start","end","getWriteStream","writeStream","openUploadStreamWithId","contentType","type","on","emit","store","GridFS"],"mappings":"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","file":"/packages/jalik_ufs-gridfs.js","sourcesContent":["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Karl STEIN\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\nimport { UploadFS } from 'meteor/jalik:ufs';\nimport { Meteor } from 'meteor/meteor';\n\n/**\n * GridFS store\n * @param options\n * @constructor\n */\nexport class GridFSStore extends UploadFS.Store {\n\n  constructor(options) {\n    // Default options\n    options = Object.assign({\n      chunkSize: 1024 * 255,\n      collectionName: 'uploadfs',\n    }, options);\n\n    // Check options\n    if (typeof options.chunkSize !== 'number') {\n      throw new TypeError('GridFSStore: chunkSize is not a number');\n    }\n    if (typeof options.collectionName !== 'string') {\n      throw new TypeError('GridFSStore: collectionName is not a string');\n    }\n\n    super(options);\n\n    this.chunkSize = parseInt(options.chunkSize);\n    this.collectionName = options.collectionName;\n\n    if (Meteor.isServer) {\n      let mongo = Package.mongo.MongoInternals.NpmModule;\n      let db = Package.mongo.MongoInternals.defaultRemoteCollectionDriver().mongo.db;\n      let mongoStore = new mongo.GridFSBucket(db, {\n        bucketName: options.collectionName,\n        chunkSizeBytes: this.chunkSize,\n      });\n\n      /**\n       * Removes the file\n       * @param fileId\n       * @param callback\n       */\n      this.delete = function (fileId, callback) {\n        if (typeof callback !== 'function') {\n          callback = function (err) {\n            if (err) {\n              console.log('error');\n            }\n          };\n        }\n\n        const collectionName = options.collectionName + '.files';\n        db.collection(collectionName).findOne({ '_id': fileId }).then((file) => {\n          if (file) {\n            mongoStore.delete(fileId, callback);\n          }\n        });\n      };\n\n      /**\n       * Returns the file read stream\n       * @param fileId\n       * @param file\n       * @param options\n       * @return {*}\n       */\n      this.getReadStream = function (fileId, file, options) {\n        options = Object.assign({}, options);\n        return mongoStore.openDownloadStream(fileId, {\n          start: options.start,\n          end: options.end,\n        });\n      };\n\n      /**\n       * Returns the file write stream\n       * @param fileId\n       * @param file\n       * @param options\n       * @return {*}\n       */\n      this.getWriteStream = function (fileId, file, options) {\n        let writeStream = mongoStore.openUploadStreamWithId(fileId, fileId, {\n          chunkSizeBytes: this.chunkSize,\n          contentType: file.type,\n        });\n        writeStream.on('close', function () {\n          writeStream.emit('finish');\n        });\n        return writeStream;\n      };\n    }\n  }\n}\n\n// Add store to UFS namespace\nUploadFS.store.GridFS = GridFSStore;\n"]}